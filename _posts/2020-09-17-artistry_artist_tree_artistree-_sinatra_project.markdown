---
layout: post
title:      "Artistry. Artist Tree. Artistree- Sinatra Project"
date:       2020-09-17 07:33:58 -0400
permalink:  artistry_artist_tree_artistree-_sinatra_project
---


 Look, mom! I built a website. Building my first Sinatra project. First and foremost I would say that this was the most fun project I have built yet. It’s been amazing to go from knowing nothing about code or development to being able to build an entire Sinatra web application. When the curriculum was first deployed I was extremely apprehensive about building this project because it seemed extremely complicated with the Html, CSS, local servers Active Record, and so many other things. I started intimidated by this material. I instantly understood why we needed to learn SQL, ORM, Sinatra, Corneal Gem, and Active Record. We learned these basic skills so that we knew what was happening under the hood with the actions we were performing and did not think they were just magic. This project was a challenge for a new developer like myself because of all that knowledge that needed to be retained to build it. The fact that we were finally in a browser and I could see my work was extremely rewarding for me and made me want to work even harder on the project
 
As a developer and musician, it brings me great joy to build my projects based on music because that is where my biggest area of interest is. When building this project I had it so many ideas in mind but to narrow my decision down about what exact project I was going to build I thought about the platform that would benefit me the most as a rising independent artist. Then Artistree came to be. Artistree is a social media platform for up and coming artists or practitioners to publish their works, achievements, links, photos, websites and in the future jobs for other artists.
The welcome page has an image and prompts the user to sign in or sign up. Signing up creates a user profile for them where their posts will live. Every post is a leaf added to the users’ Artistree and all posts together are the tree. If the user already has an account the user can sign in. If the user wants to take a leaf away from their Artistree or delete a post they created that option is presented to them after clicking their specific post. The user is only allowed to edit or delete their leaves or posts.

I created two tables and corresponding models that possess the necessary associations. The user has_many post and posts, belongs_to user. Migrating at first was a tough process for me. When working on the labs I created all my migration files manually which posed a problem while building this project. My manually created files would not migrate so I had to use the terminal commands to create the migrations then they finally worked. Finally, once tables were set up and migrated and the associations between the models were set up, I created some seed data to make sure my routes worked. The login/logout and signup routes were created in the user’s controller. I used ActiveRecord’s validation to make that emails are unique and a user can’t create multiple accounts using the same email. After the user controller was set up, I then started on the post controller where I created CRUD routes using  RESTful design. I added the validation that if a user is not logged in, the only page they can access is the login, welcome, and signup pages. I then ensured that users can edit and delete only their resources - not resources created by other users. Lastly using the Active Records validations to account for bad user input so bad data cannot be persisted to the database.

All in all, through this project I have learned so much about being a web developer. Html, CSS, Flash, Restful Routing, Active Record, Validations, and much more. The information I’m learning and the experience I'm gaining in this program is invaluable and I wouldn't have it any other way even though things get tough. 


